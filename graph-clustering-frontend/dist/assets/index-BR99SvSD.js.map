{"version":3,"file":"index-BR99SvSD.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/App.tsx","../../src/components/ErrorBoundary.tsx","../../src/index.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import React, { useState } from 'react';\r\n\r\n// Import all our types\r\ninterface NodePosition {\r\n  x: number;\r\n  y: number;\r\n  radius: number;\r\n}\r\n\r\ninterface HierarchyLevel {\r\n  level: number;\r\n  communities: Record<string, string[]>;\r\n  parentMap?: Record<string, string>;\r\n}\r\n\r\ninterface ClusteringResult {\r\n  datasetId: string;\r\n  jobId: string;\r\n  algorithm: string;\r\n  levels: HierarchyLevel[];\r\n  coordinates: Record<string, NodePosition>;\r\n  modularity: number;\r\n  numLevels: number;\r\n  numCommunities: number;\r\n  processingTimeMS: number;\r\n}\r\n\r\ninterface Dataset {\r\n  id: string;\r\n  name: string;\r\n  uploadedAt: string;\r\n  nodeCount?: number;\r\n  edgeCount?: number;\r\n}\r\n\r\ninterface JobProgress {\r\n  percentage: number;\r\n  message: string;\r\n}\r\n\r\ninterface Experiment {\r\n  id: string;\r\n  datasetId: string;\r\n  algorithm: 'louvain' | 'scar';\r\n  parameters: ClusteringParameters;\r\n  jobId?: string;\r\n  status: 'configuring' | 'running' | 'completed' | 'failed';\r\n  result?: ClusteringResult;\r\n  error?: string;\r\n  progress?: JobProgress;\r\n  createdAt: string;\r\n}\r\n\r\ninterface ClusteringParameters {\r\n  maxLevels: number;\r\n  maxIterations: number;\r\n  minModularityGain: number;\r\n  k?: number;\r\n  nk?: number;\r\n  threshold?: number;\r\n}\r\n\r\n// Import Zustand\r\nimport { create } from 'zustand';\r\n\r\n// Zustand Store\r\ninterface VisualizationStore {\r\n  datasets: Dataset[];\r\n  currentDataset: Dataset | null;\r\n  experiments: Experiment[];\r\n  currentViz: string;\r\n  \r\n  addDataset: (dataset: Dataset) => void;\r\n  setCurrentDataset: (dataset: Dataset | null) => void;\r\n  removeDataset: (datasetId: string) => void;\r\n  addExperiment: (experiment: Experiment) => void;\r\n  updateExperiment: (id: string, updates: Partial<Experiment>) => void;\r\n  removeExperiment: (id: string) => void;\r\n  setCurrentViz: (viz: string) => void;\r\n  reset: () => void;\r\n}\r\n\r\nconst useVisualizationStore = create<VisualizationStore>((set) => ({\r\n  datasets: [],\r\n  currentDataset: null,\r\n  experiments: [],\r\n  currentViz: 'timeline-hierarchy',\r\n  \r\n  addDataset: (dataset) => set((state) => ({ \r\n    datasets: [...state.datasets, dataset],\r\n    currentDataset: dataset\r\n  })),\r\n  \r\n  setCurrentDataset: (dataset) => set({ currentDataset: dataset }),\r\n  \r\n  removeDataset: (datasetId) => set((state) => ({\r\n    datasets: state.datasets.filter(d => d.id !== datasetId),\r\n    experiments: state.experiments.filter(e => e.datasetId !== datasetId),\r\n    currentDataset: state.currentDataset?.id === datasetId ? null : state.currentDataset\r\n  })),\r\n  \r\n  addExperiment: (experiment) => set((state) => ({\r\n    experiments: [...state.experiments, experiment]\r\n  })),\r\n  \r\n  updateExperiment: (id, updates) => set((state) => ({\r\n    experiments: state.experiments.map(exp => \r\n      exp.id === id ? { ...exp, ...updates } : exp\r\n    )\r\n  })),\r\n  \r\n  removeExperiment: (id) => set((state) => ({\r\n    experiments: state.experiments.filter(exp => exp.id !== id)\r\n  })),\r\n  \r\n  setCurrentViz: (viz) => set({ currentViz: viz }),\r\n  \r\n  reset: () => set({\r\n    datasets: [],\r\n    currentDataset: null,\r\n    experiments: [],\r\n    currentViz: 'timeline-hierarchy'\r\n  })\r\n}));\r\n\r\n// API Client\r\nclass ClusteringApiClient {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl: string = 'http://localhost:8080/api/v1') {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  async uploadDataset(name: string, files: { graphFile: File; propertiesFile: File; pathFile: File }) {\r\n    const formData = new FormData();\r\n    formData.append('name', name);\r\n    formData.append('graphFile', files.graphFile);\r\n    formData.append('propertiesFile', files.propertiesFile);\r\n    formData.append('pathFile', files.pathFile);\r\n\r\n    const response = await fetch(`${this.baseUrl}/datasets`, {\r\n      method: 'POST',\r\n      body: formData\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Upload failed: ${response.status} ${errorText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async startClustering(datasetId: string, algorithm: string, parameters: ClusteringParameters) {\r\n    const response = await fetch(`${this.baseUrl}/datasets/${datasetId}/clustering`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ algorithm, parameters })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Clustering failed: ${response.status} ${errorText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async getJobStatus(datasetId: string, jobId: string) {\r\n    const response = await fetch(`${this.baseUrl}/datasets/${datasetId}/clustering/${jobId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to get job status: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getHierarchy(datasetId: string, jobId: string) {\r\n    const response = await fetch(`${this.baseUrl}/datasets/${datasetId}/hierarchy?jobId=${jobId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to get hierarchy: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n}\r\n\r\nconst apiClient = new ClusteringApiClient();\r\n\r\n// UI Components\r\n\r\n// Button Component\r\nconst Button: React.FC<{\r\n  children: React.ReactNode;\r\n  onClick?: () => void;\r\n  disabled?: boolean;\r\n  variant?: 'primary' | 'secondary' | 'danger' | 'success';\r\n  size?: 'sm' | 'md' | 'lg';\r\n  className?: string;\r\n}> = ({\r\n  children,\r\n  onClick,\r\n  disabled = false,\r\n  variant = 'primary',\r\n  size = 'md',\r\n  className = ''\r\n}) => {\r\n  const variantClasses = {\r\n    primary: 'bg-blue-600 text-white hover:bg-blue-700',\r\n    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300',\r\n    danger: 'bg-red-600 text-white hover:bg-red-700',\r\n    success: 'bg-green-600 text-white hover:bg-green-700'\r\n  };\r\n\r\n  const sizeClasses = {\r\n    sm: 'px-3 py-1.5 text-sm',\r\n    md: 'px-4 py-2 text-base',\r\n    lg: 'px-6 py-3 text-lg'\r\n  };\r\n\r\n  const classes = [\r\n    'rounded-md font-medium transition-colors duration-200',\r\n    variantClasses[variant],\r\n    sizeClasses[size],\r\n    disabled ? 'opacity-50 cursor-not-allowed' : '',\r\n    className\r\n  ].filter(Boolean).join(' ');\r\n\r\n  return (\r\n    <button className={classes} onClick={onClick} disabled={disabled}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\n// Card Component\r\nconst Card: React.FC<{\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  onClick?: () => void;\r\n}> = ({ children, className = '', onClick }) => {\r\n  const classes = [\r\n    'bg-white rounded-lg shadow border border-gray-200 p-4',\r\n    onClick ? 'cursor-pointer hover:shadow-md transition-all duration-200' : '',\r\n    className\r\n  ].filter(Boolean).join(' ');\r\n\r\n  return (\r\n    <div className={classes} onClick={onClick}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Loading Component\r\nconst Loading: React.FC<{\r\n  message?: string;\r\n  progress?: number;\r\n}> = ({ message = 'Loading...', progress }) => {\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center space-y-3\">\r\n      <div className=\"animate-spin rounded-full border-2 border-gray-300 border-t-blue-600 w-6 h-6\" />\r\n      {message && <p className=\"text-sm text-gray-600 text-center\">{message}</p>}\r\n      {progress !== undefined && (\r\n        <div className=\"w-full max-w-xs\">\r\n          <div className=\"bg-gray-200 rounded-full h-2\">\r\n            <div \r\n              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n              style={{ width: `${Math.min(100, Math.max(0, progress))}%` }}\r\n            />\r\n          </div>\r\n          <div className=\"text-xs text-gray-500 text-center mt-1\">\r\n            {Math.round(progress || 0)}%\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Dataset Upload Component\r\nconst DatasetUpload: React.FC<{ onComplete: () => void; onCancel?: () => void }> = ({ onComplete, onCancel }) => {\r\n  const [name, setName] = useState('');\r\n  const [files, setFiles] = useState<{\r\n    graphFile?: File;\r\n    propertiesFile?: File;\r\n    pathFile?: File;\r\n  }>({});\r\n  const [uploading, setUploading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const { addDataset } = useVisualizationStore();\r\n\r\n  const handleFileChange = (type: 'graphFile' | 'propertiesFile' | 'pathFile') => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      setFiles(prev => ({ ...prev, [type]: file }));\r\n      setError(null);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!name.trim() || !files.graphFile || !files.propertiesFile || !files.pathFile) {\r\n      setError('Please provide all required fields and files');\r\n      return;\r\n    }\r\n\r\n    setUploading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await apiClient.uploadDataset(name.trim(), {\r\n        graphFile: files.graphFile!,\r\n        propertiesFile: files.propertiesFile!,\r\n        pathFile: files.pathFile!\r\n      });\r\n\r\n      const dataset: Dataset = {\r\n        id: response.data.datasetId,\r\n        name: name.trim(),\r\n        uploadedAt: new Date().toISOString()\r\n      };\r\n\r\n      addDataset(dataset);\r\n      onComplete();\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Upload failed. Please try again.');\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  if (uploading) {\r\n    return (\r\n      <Card className=\"max-w-md mx-auto\">\r\n        <Loading message=\"Uploading dataset...\" />\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className=\"max-w-2xl mx-auto\">\r\n      <div className=\"space-y-6\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900\">Upload Dataset</h2>\r\n          <p className=\"text-gray-600 mt-2\">Upload your graph files to start clustering analysis</p>\r\n        </div>\r\n        \r\n        <div className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Dataset Name</label>\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              placeholder=\"My Graph Dataset\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            {[\r\n              { key: 'graphFile', label: 'Graph File', desc: 'Format: source target [weight]' },\r\n              { key: 'propertiesFile', label: 'Properties File', desc: 'Format: nodeId typeId' },\r\n              { key: 'pathFile', label: 'Path File', desc: 'Format: typeId (one per line)' }\r\n            ].map(({ key, label, desc }) => (\r\n              <div key={key}>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">{label}</label>\r\n                <input\r\n                  type=\"file\"\r\n                  onChange={handleFileChange(key as any)}\r\n                  className=\"w-full text-sm file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\r\n                  accept=\".txt,.csv\"\r\n                />\r\n                <p className=\"text-xs text-gray-500 mt-1\">{desc}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {error && (\r\n          <div className=\"p-3 bg-red-100 border border-red-400 text-red-700 rounded-md\">\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"flex justify-end space-x-3\">\r\n          {onCancel && <Button variant=\"secondary\" onClick={onCancel}>Cancel</Button>}\r\n          <Button onClick={handleSubmit} disabled={!name.trim() || !files.graphFile || !files.propertiesFile || !files.pathFile}>\r\n            Upload Dataset\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Experiment Controls Component\r\nconst ExperimentControls: React.FC = () => {\r\n  const { currentDataset, addExperiment } = useVisualizationStore();\r\n  const [algorithm, setAlgorithm] = useState<'louvain' | 'scar'>('louvain');\r\n  const [parameters, setParameters] = useState<ClusteringParameters>({\r\n    maxLevels: 5,\r\n    maxIterations: 100,\r\n    minModularityGain: 0.000001\r\n  });\r\n  const [isStarting, setIsStarting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleStartExperiment = async () => {\r\n    if (!currentDataset) return;\r\n\r\n    const experiment: Experiment = {\r\n      id: `exp_${Date.now()}`,\r\n      datasetId: currentDataset.id,\r\n      algorithm,\r\n      parameters,\r\n      status: 'configuring',\r\n      createdAt: new Date().toISOString()\r\n    };\r\n\r\n    addExperiment(experiment);\r\n    setIsStarting(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await apiClient.startClustering(currentDataset.id, algorithm, parameters);\r\n      \r\n      useVisualizationStore.getState().updateExperiment(experiment.id, {\r\n        jobId: response.data.jobId,\r\n        status: 'running'\r\n      });\r\n    } catch (err) {\r\n      useVisualizationStore.getState().updateExperiment(experiment.id, {\r\n        status: 'failed',\r\n        error: err instanceof Error ? err.message : 'Failed to start clustering'\r\n      });\r\n      setError(err instanceof Error ? err.message : 'Failed to start experiment');\r\n    } finally {\r\n      setIsStarting(false);\r\n    }\r\n  };\r\n\r\n  if (!currentDataset) {\r\n    return (\r\n      <Card className=\"border-l-4 border-gray-400\">\r\n        <div className=\"text-center py-8\">\r\n          <p className=\"text-gray-500\">Please upload a dataset to create experiments</p>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className=\"border-l-4 border-blue-500\">\r\n      <div className=\"space-y-6\">\r\n        <div>\r\n          <h3 className=\"text-lg font-semibold text-gray-900\">New Experiment</h3>\r\n          <p className=\"text-sm text-gray-600\">Configure clustering parameters for {currentDataset.name}</p>\r\n        </div>\r\n        \r\n        <div className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Algorithm</label>\r\n            <select\r\n              value={algorithm}\r\n              onChange={(e) => setAlgorithm(e.target.value as 'louvain' | 'scar')}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n            >\r\n              <option value=\"louvain\">Louvain</option>\r\n              <option value=\"scar\">SCAR</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Max Levels</label>\r\n              <input\r\n                type=\"number\"\r\n                value={parameters.maxLevels}\r\n                onChange={(e) => setParameters(prev => ({ ...prev, maxLevels: parseInt(e.target.value) }))}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                min=\"1\"\r\n                max=\"20\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Max Iterations</label>\r\n              <input\r\n                type=\"number\"\r\n                value={parameters.maxIterations}\r\n                onChange={(e) => setParameters(prev => ({ ...prev, maxIterations: parseInt(e.target.value) }))}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                min=\"10\"\r\n                max=\"1000\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Min Modularity Gain</label>\r\n              <input\r\n                type=\"number\"\r\n                value={parameters.minModularityGain}\r\n                onChange={(e) => setParameters(prev => ({ ...prev, minModularityGain: parseFloat(e.target.value) }))}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                step=\"0.000001\"\r\n                min=\"0\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {error && (\r\n          <div className=\"p-3 bg-red-100 border border-red-400 text-red-700 rounded-md\">\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        <Button\r\n          variant=\"success\"\r\n          onClick={handleStartExperiment}\r\n          disabled={isStarting || !currentDataset}\r\n          className=\"w-full\"\r\n        >\r\n          {isStarting ? 'Starting...' : 'Start Experiment'}\r\n        </Button>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Polling Hook\r\nconst usePolling = (callback: () => Promise<boolean>, interval: number, enabled: boolean) => {\r\n  React.useEffect(() => {\r\n    if (!enabled) return;\r\n\r\n    const poll = async () => {\r\n      try {\r\n        const shouldContinue = await callback();\r\n        if (shouldContinue) {\r\n          setTimeout(poll, interval);\r\n        }\r\n      } catch (error) {\r\n        console.error('Polling error:', error);\r\n      }\r\n    };\r\n\r\n    poll();\r\n  }, [callback, interval, enabled]);\r\n};\r\n\r\n// Timeline Components\r\nconst MiniGraph: React.FC<{\r\n  nodes: string[];\r\n  coordinates: Record<string, NodePosition>;\r\n  width?: number;\r\n  height?: number;\r\n}> = ({ nodes, coordinates, width = 120, height = 80 }) => {\r\n  const scale = 0.4;\r\n  const centerX = width / 2;\r\n  const centerY = height / 2;\r\n\r\n  const validNodes = nodes.filter(nodeId => coordinates[nodeId]);\r\n\r\n  if (validNodes.length === 0) {\r\n    return (\r\n      <div \r\n        className=\"flex items-center justify-center bg-gray-50 border rounded text-xs text-gray-500\"\r\n        style={{ width, height }}\r\n      >\r\n        No coordinates\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <svg width={width} height={height} className=\"border rounded bg-gray-50\">\r\n      {validNodes.map(nodeId => {\r\n        const coord = coordinates[nodeId];\r\n        const radius = Math.max(2, coord.radius * 0.3);\r\n        const fillColor = nodeId.startsWith('c0_') ? '#ef4444' : '#06b6d4';\r\n\r\n        return (\r\n          <circle\r\n            key={nodeId}\r\n            cx={centerX + (coord.x * scale)}\r\n            cy={centerY + (coord.y * scale)}\r\n            r={radius}\r\n            fill={fillColor}\r\n            stroke=\"#fff\"\r\n            strokeWidth=\"1\"\r\n          >\r\n            <title>{nodeId}</title>\r\n          </circle>\r\n        );\r\n      })}\r\n    </svg>\r\n  );\r\n};\r\n\r\nconst TimelineColumn: React.FC<{ experiment: Experiment }> = ({ experiment }) => {\r\n  const { updateExperiment } = useVisualizationStore();\r\n  const [hierarchyPath, setHierarchyPath] = useState<string[]>([]);\r\n\r\n  // Polling for running experiments\r\n  const pollJobStatus = React.useCallback(async (): Promise<boolean> => {\r\n    if (!experiment.jobId || experiment.status !== 'running') return false;\r\n\r\n    try {\r\n      const response = await apiClient.getJobStatus(experiment.datasetId, experiment.jobId);\r\n      const jobData = response.data;\r\n\r\n      updateExperiment(experiment.id, {\r\n        status: jobData.status as any,\r\n        progress: jobData.progress,\r\n        error: jobData.error\r\n      });\r\n\r\n      if (jobData.status === 'completed') {\r\n        const hierarchyResponse = await apiClient.getHierarchy(experiment.datasetId, experiment.jobId);\r\n        const result = hierarchyResponse.data.hierarchy;\r\n        \r\n        updateExperiment(experiment.id, { result });\r\n        \r\n        // Generate simple drill-down path\r\n        if (result.levels.length > 0) {\r\n          const path: string[] = [];\r\n          for (let i = result.levels.length - 1; i >= 0; i--) {\r\n            const level = result.levels[i];\r\n            const communities = Object.entries(level.communities) as [string, string[]][];\r\n            if (communities.length > 0) {\r\n              // Select community with most nodes\r\n                const bestCommunity = communities.reduce((best: [string, string[]], current: [string, string[]]) => \r\n                current[1].length > best[1].length ? current : best\r\n                );\r\n              path.push(bestCommunity[0]);\r\n            }\r\n          }\r\n          setHierarchyPath(path);\r\n        }\r\n        \r\n        return false;\r\n      }\r\n\r\n      return jobData.status === 'running';\r\n    } catch (error) {\r\n      updateExperiment(experiment.id, {\r\n        status: 'failed',\r\n        error: error instanceof Error ? error.message : 'Job polling failed'\r\n      });\r\n      return false;\r\n    }\r\n  }, [experiment.id, experiment.jobId, experiment.datasetId, experiment.status, updateExperiment]);\r\n\r\n  usePolling(pollJobStatus, 2000, experiment.status === 'running');\r\n\r\n  const getParameterString = () => {\r\n    return Object.entries(experiment.parameters)\r\n      .map(([key, value]) => `${key}=${value}`)\r\n      .join(', ');\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-w-80\">\r\n      <Card className=\"h-full border-2 border-transparent hover:border-blue-300 transition-all\">\r\n        <div className=\"space-y-4\">\r\n          {/* Header */}\r\n          <div className=\"border-b border-gray-200 pb-3\">\r\n            <div className=\"flex items-center gap-2 mb-2\">\r\n              <h3 className=\"font-semibold\">Experiment {experiment.id.slice(-4)}</h3>\r\n              <span className=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded font-medium\">\r\n                {experiment.algorithm}\r\n              </span>\r\n            </div>\r\n            <p className=\"text-xs text-gray-600 mb-2\">{getParameterString()}</p>\r\n            \r\n            {experiment.result && (\r\n              <div className=\"flex flex-col gap-1 text-xs text-gray-700\">\r\n                <span>Modularity: {experiment.result.modularity.toFixed(3)}</span>\r\n                <span>Levels: {experiment.result.levels.length}</span>\r\n                {experiment.result.processingTimeMS && (\r\n                  <span>Time: {(experiment.result.processingTimeMS / 1000).toFixed(1)}s</span>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Status */}\r\n          {experiment.status === 'running' && (\r\n            <div className=\"mb-4\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <div className=\"w-3 h-3 bg-blue-500 rounded-full animate-pulse\"></div>\r\n                <span className=\"text-sm text-blue-600\">Running...</span>\r\n              </div>\r\n              {experiment.progress && (\r\n                <div className=\"space-y-1\">\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                    <div \r\n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                      style={{ width: `${experiment.progress.percentage}%` }}\r\n                    ></div>\r\n                  </div>\r\n                  <p className=\"text-xs text-gray-600\">{experiment.progress.message}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {experiment.status === 'failed' && (\r\n            <div className=\"mb-4 p-3 bg-red-100 border border-red-300 rounded text-red-700 text-sm\">\r\n              Error: {experiment.error}\r\n            </div>\r\n          )}\r\n\r\n          {/* Hierarchy Path */}\r\n          {experiment.result && hierarchyPath.length > 0 && (\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"text-sm font-medium text-gray-700\">Hierarchy Path</h4>\r\n              {hierarchyPath.map((communityId, index) => {\r\n                const levelIndex = experiment.result!.levels.length - 1 - index;\r\n                const level = experiment.result!.levels[levelIndex];\r\n                const community = level.communities[communityId] || [];\r\n                \r\n                return (\r\n                  <div key={`${levelIndex}-${communityId}`} className=\"bg-white border-l-4 border-blue-500 rounded-lg p-3 shadow-sm\">\r\n                    <div className=\"flex justify-between items-center mb-2\">\r\n                      <h5 className=\"font-semibold text-gray-700\">Level {level.level}</h5>\r\n                      <span className=\"text-sm text-gray-500\">{Object.keys(level.communities).length} communities</span>\r\n                    </div>\r\n                    \r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"text-sm font-medium text-blue-600\">{communityId}</span>\r\n                        <span className=\"text-xs text-gray-500\">{community.length} nodes</span>\r\n                      </div>\r\n                      \r\n                      <MiniGraph\r\n                        nodes={community}\r\n                        coordinates={experiment.result!.coordinates}\r\n                        width={100}\r\n                        height={60}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TimelineHierarchy: React.FC = () => {\r\n  const { experiments, currentDataset } = useVisualizationStore();\r\n\r\n  if (!currentDataset) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64 text-gray-500\">\r\n        Please upload a dataset first\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const datasetExperiments = experiments.filter(exp => exp.datasetId === currentDataset.id);\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <div className=\"border-b border-gray-200 p-4 bg-white\">\r\n        <h2 className=\"text-xl font-bold\">Timeline Hierarchy</h2>\r\n        <p className=\"text-gray-600\">Dataset: {currentDataset.name}</p>\r\n      </div>\r\n\r\n      <div className=\"flex-1 overflow-hidden\">\r\n        <div className=\"flex gap-4 p-4 overflow-x-auto h-full\">\r\n          {datasetExperiments.map(experiment => (\r\n            <TimelineColumn key={experiment.id} experiment={experiment} />\r\n          ))}\r\n          \r\n          {datasetExperiments.length === 0 && (\r\n            <div className=\"flex items-center justify-center w-full text-gray-500\">\r\n              No experiments yet. Create one using the controls above.\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Main App Component\r\nconst App: React.FC = () => {\r\n  const { currentDataset } = useVisualizationStore();\r\n  const [showUpload, setShowUpload] = useState(false);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100\">\r\n      {/* Header */}\r\n      <header className=\"bg-white shadow-sm border-b\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex justify-between items-center h-16\">\r\n            <div>\r\n              <h1 className=\"text-xl font-bold text-gray-900\">Graph Clustering Visualization</h1>\r\n              {currentDataset && (\r\n                <p className=\"text-sm text-gray-600\">Current: {currentDataset.name}</p>\r\n              )}\r\n            </div>\r\n            \r\n            <div className=\"flex gap-2\">\r\n              <Button onClick={() => setShowUpload(true)}>\r\n                Upload Dataset\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Main Content */}\r\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n        {showUpload && (\r\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n            <div className=\"bg-white rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\r\n              <div className=\"p-6\">\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                  <h2 className=\"text-xl font-bold\">Upload New Dataset</h2>\r\n                  <button\r\n                    onClick={() => setShowUpload(false)}\r\n                    className=\"text-gray-500 hover:text-gray-700\"\r\n                  >\r\n                    ✕\r\n                  </button>\r\n                </div>\r\n                <DatasetUpload onComplete={() => setShowUpload(false)} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {currentDataset && (\r\n          <div className=\"space-y-6\">\r\n            <ExperimentControls />\r\n            <div className=\"bg-white rounded-lg shadow h-[600px]\">\r\n              <TimelineHierarchy />\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {!currentDataset && (\r\n          <div className=\"text-center py-12\">\r\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\r\n              Welcome to Graph Clustering Visualization\r\n            </h2>\r\n            <p className=\"text-gray-600 mb-8\">\r\n              Upload your graph dataset to get started with clustering analysis\r\n            </p>\r\n            <Button onClick={() => setShowUpload(true)} size=\"lg\">\r\n              Upload Your First Dataset\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","// components/ErrorBoundary.tsx\r\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\r\n\r\ninterface ErrorBoundaryState {\r\n  hasError: boolean;\r\n  error?: Error;\r\n  errorInfo?: ErrorInfo;\r\n}\r\n\r\ninterface ErrorBoundaryProps {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n}\r\n\r\nexport class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\r\n  constructor(props: ErrorBoundaryProps) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\r\n    this.setState({ error, errorInfo });\r\n    \r\n    // Here you could log to an error reporting service\r\n    // e.g., Sentry.captureException(error, { extra: errorInfo });\r\n  }\r\n\r\n  private handleReset = () => {\r\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\r\n  };\r\n\r\n  private handleReload = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // Custom fallback UI\r\n      if (this.props.fallback) {\r\n        return this.props.fallback;\r\n      }\r\n\r\n      return (\r\n        <div className=\"min-h-screen bg-gray-100 flex items-center justify-center p-4\">\r\n          <div className=\"max-w-md w-full bg-white rounded-lg shadow-lg p-6\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-red-500 mb-4\">\r\n                <svg className=\"mx-auto h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                    d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.232 15.5c-.77.833.192 2.5 1.732 2.5z\" />\r\n                </svg>\r\n              </div>\r\n              \r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-2\">\r\n                Oops! Something went wrong\r\n              </h2>\r\n              \r\n              <p className=\"text-gray-600 mb-6\">\r\n                The visualization encountered an unexpected error. This might be due to invalid data or a network issue.\r\n              </p>\r\n\r\n              {/* Error Details (only in development) */}\r\n              {process.env.NODE_ENV === 'development' && this.state.error && (\r\n                <div className=\"mb-6 text-left\">\r\n                  <details className=\"bg-gray-50 border rounded-lg p-4\">\r\n                    <summary className=\"font-medium text-gray-700 cursor-pointer\">\r\n                      Error Details\r\n                    </summary>\r\n                    <div className=\"mt-2 text-sm text-gray-600\">\r\n                      <p className=\"font-medium\">{this.state.error.name}:</p>\r\n                      <p className=\"mb-2\">{this.state.error.message}</p>\r\n                      {this.state.error.stack && (\r\n                        <pre className=\"text-xs bg-gray-100 p-2 rounded overflow-auto\">\r\n                          {this.state.error.stack}\r\n                        </pre>\r\n                      )}\r\n                    </div>\r\n                  </details>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"space-y-3\">\r\n                <button\r\n                  onClick={this.handleReset}\r\n                  className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\r\n                >\r\n                  Try Again\r\n                </button>\r\n                \r\n                <button\r\n                  onClick={this.handleReload}\r\n                  className=\"w-full px-4 py-2 bg-gray-200 text-gray-900 rounded-md hover:bg-gray-300 transition-colors\"\r\n                >\r\n                  Reload Page\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"mt-6 text-sm text-gray-500\">\r\n                <p>If this problem persists, please check:</p>\r\n                <ul className=\"mt-2 text-left space-y-1\">\r\n                  <li>• Your internet connection</li>\r\n                  <li>• That the backend server is running</li>\r\n                  <li>• That your data files are valid</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// Higher-order component for wrapping individual components\r\nexport const withErrorBoundary = <P extends object>(\r\n  Component: React.ComponentType<P>,\r\n  fallback?: ReactNode\r\n) => {\r\n  const WrappedComponent = (props: P) => (\r\n    <ErrorBoundary fallback={fallback}>\r\n      <Component {...props} />\r\n    </ErrorBoundary>\r\n  );\r\n  \r\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\r\n  return WrappedComponent;\r\n};","// index.tsx\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport { ErrorBoundary } from './components/ErrorBoundary';\r\nimport './styles/global.css';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\n\r\nroot.render(\r\n  <React.StrictMode>\r\n    <ErrorBoundary>\r\n      <App />\r\n    </ErrorBoundary>\r\n  </React.StrictMode>\r\n);"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","useVisualizationStore","create","set","dataset","state","datasetId","experiment","id","updates","exp","viz","ClusteringApiClient","baseUrl","__publicField","name","files","formData","response","errorText","algorithm","parameters","jobId","apiClient","Button","children","onClick","disabled","variant","size","className","variantClasses","sizeClasses","classes","Card","jsx","Loading","message","progress","jsxs","DatasetUpload","onComplete","onCancel","setName","useState","setFiles","uploading","setUploading","error","setError","addDataset","handleFileChange","type","file","prev","handleSubmit","err","key","label","desc","ExperimentControls","currentDataset","addExperiment","setAlgorithm","setParameters","isStarting","setIsStarting","handleStartExperiment","usePolling","callback","interval","enabled","React","poll","MiniGraph","nodes","coordinates","width","height","centerX","centerY","validNodes","nodeId","coord","radius","fillColor","TimelineColumn","updateExperiment","hierarchyPath","setHierarchyPath","pollJobStatus","jobData","result","path","i","level","communities","bestCommunity","best","current","getParameterString","value","communityId","index","levelIndex","community","TimelineHierarchy","experiments","datasetExperiments","App","showUpload","setShowUpload","ErrorBoundary","Component","props","errorInfo","root","ReactDOM"],"mappings":"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","x_google_ignoreList":[0,1,2]}